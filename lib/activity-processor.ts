// lib/activity-processor.ts

import { StravaClient } from './strava-client';
import { getStoredUserToken, storeUserToken, storeActivityDetails } from './redis';
import { StravaActivity, StravaTokens, StravaActivityDetails } from '@/types/strava';

// Interface pour le format de donn√©es souhait√©
interface FormattedActivity {
  date: string;
  type: string;
  avg_hr: number | null;
  charge: number | null;
  commute: boolean;
  avg_watts: string | null;
  elevation: number;
  intensity: number | null;
  upload_id: number;
  activity_id: number;
  avg_cadence: number | null;
  time_moving: number;
  suffer_score: number | null;
  time_elapsed: number;
  distance_meter: number;
  userId: number; // ‚≠ê Ajout du userId pour les requ√™tes
}

export async function fetchAndProcessActivity(activityId: number, ownerId: number): Promise<void> {
  try {
    // R√©cup√©rer les tokens de l'utilisateur depuis Redis
    let tokenData = await getStoredUserToken(ownerId);
    
    if (!tokenData) {
      console.log(`‚ùå Aucun token trouv√© pour l'utilisateur ${ownerId}`);
      return;
    }
    
    // V√©rifier si le token doit √™tre rafra√Æchi
    if (isTokenExpired(tokenData)) {
      console.log(`üîÑ Token expir√© pour l'utilisateur ${ownerId}, rafra√Æchissement...`);
      tokenData = await refreshUserToken(ownerId, tokenData.refresh_token);
    }
    
    // Cr√©er le client Strava
    const stravaClient = new StravaClient(tokenData.access_token);
    
    // R√©cup√©rer les d√©tails de l'activit√©
    const activity = await stravaClient.fetchActivity(activityId);
    
    console.log('‚úÖ Activit√© r√©cup√©r√©e:', {
      id: activity.id,
      name: activity.name,
      type: activity.type
    });
    
    // Traiter l'activit√© selon tes besoins
    await processActivity(activity, ownerId);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du traitement de l\'activit√©:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('401')) {
        console.error('üîê Erreur d\'authentification - token invalide ou expir√©');
      } else if (error.message.includes('403')) {
        console.error('üö´ Acc√®s interdit - v√©rifier les permissions');
      } else if (error.message.includes('404')) {
        console.error('üîç Activit√© non trouv√©e ou supprim√©e');
      } else if (error.message.includes('429')) {
        console.error('‚è±Ô∏è Rate limit atteint - trop de requ√™tes');
      }
    }
  }
}

async function processActivity(activity: StravaActivity, ownerId: number): Promise<void> {
  try {
    console.log(`üîÑ Traitement de l'activit√© ${activity.id} pour l'utilisateur ${ownerId}`);
    
    // Formatter les donn√©es dans le format souhait√©
    const formattedActivity: FormattedActivity = formatActivityData(activity, ownerId);
    
    console.log('üìã Donn√©es format√©es:', formattedActivity);
    
    // Stocker l'activit√© format√©e
    await storeFormattedActivity(formattedActivity, ownerId);
    
    // ‚≠ê NOUVEAU : R√©cup√©rer les d√©tails pour les activit√©s de course
    if (StravaClient.shouldFetchDetails(activity)) {
      console.log(`üèÉ R√©cup√©ration des d√©tails pour l'activit√© de type ${activity.type}`);
      await fetchAndStoreActivityDetails(activity.id, ownerId);
    }
    
    console.log(`‚úÖ Activit√© ${activity.id} trait√©e avec succ√®s`);
    
  } catch (error) {
    console.error(`‚ùå Erreur lors du traitement de l'activit√© ${activity.id}:`, error);
    throw error;
  }
}

// ‚≠ê Nouvelle fonction pour r√©cup√©rer et stocker les d√©tails
async function fetchAndStoreActivityDetails(activityId: number, ownerId: number): Promise<void> {
  try {
    // R√©cup√©rer le token utilisateur
    let tokenData = await getStoredUserToken(ownerId);
    
    if (!tokenData) {
      console.log(`‚ùå Pas de token pour r√©cup√©rer les d√©tails de l'activit√© ${activityId}`);
      return;
    }
    
    // V√©rifier expiration du token
    if (isTokenExpired(tokenData)) {
      tokenData = await refreshUserToken(ownerId, tokenData.refresh_token);
    }
    
    // Cr√©er le client et r√©cup√©rer les d√©tails
    const stravaClient = new StravaClient(tokenData.access_token);
    const details = await stravaClient.fetchActivityDetails(activityId);
    
    // Stocker les d√©tails dans Redis
    await storeActivityDetails(activityId, details);
    
    console.log(`üìä D√©tails stock√©s pour l'activit√© ${activityId}`);
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration des d√©tails pour l'activit√© ${activityId}:`, error);
    // Ne pas faire √©chouer tout le processus pour les d√©tails
  }
}

function isTokenExpired(tokenData: StravaTokens): boolean {
  const now = Math.floor(Date.now() / 1000);
  const bufferTime = 300; // 5 minutes de marge
  return now >= (tokenData.expires_at - bufferTime);
}

async function refreshUserToken(userId: number, refreshToken: string): Promise<StravaTokens> {
  try {
    const stravaClient = new StravaClient(''); // Token vide pour le refresh
    const newTokenData = await stravaClient.refreshToken(refreshToken);
    
    const tokens: StravaTokens = {
      access_token: newTokenData.access_token,
      refresh_token: newTokenData.refresh_token,
      expires_at: newTokenData.expires_at,
      token_type: newTokenData.token_type
    };
    
    // Stocker les nouveaux tokens
    await storeUserToken(userId, tokens);
    console.log(`‚úÖ Token rafra√Æchi pour l'utilisateur ${userId}`);
    
    return tokens;
  } catch (error) {
    console.error(`‚ùå Erreur lors du refresh token pour l'utilisateur ${userId}:`, error);
    throw new Error(`Impossible de rafra√Æchir le token: ${error}`);
  }
}

function formatActivityData(activity: StravaActivity, userId: number): FormattedActivity {
  // Calculer la charge (Training Stress Score approximatif)
  const charge = calculateCharge(activity);
  
  // Calculer l'intensit√©
  const intensity = calculateIntensity(activity);
  
  return {
    date: activity.start_date,
    type: activity.type,
    avg_hr: activity.average_heartrate || null,
    charge: charge,
    commute: (activity as any).commute || false, // Strava a ce champ
    avg_watts: activity.average_watts ? activity.average_watts.toString() : null,
    elevation: Math.round(activity.total_elevation_gain || 0),
    intensity: intensity,
    upload_id: (activity as any).upload_id || 0, // Strava a ce champ
    activity_id: activity.id,
    avg_cadence: (activity as any).average_cadence || null, // Strava a ce champ
    time_moving: activity.moving_time,
    suffer_score: (activity as any).suffer_score || null, // Strava a ce champ
    time_elapsed: activity.elapsed_time,
    distance_meter: Math.round(activity.distance),
    userId: userId // ‚≠ê Ajout du userId
  };
}

function calculateCharge(activity: StravaActivity): number | null {
  // Calcul de la charge bas√© sur HR et dur√©e
  if (!activity.average_heartrate || !activity.moving_time) {
    return null;
  }
  
  // Formule approximative : (HR moyenne / HR max estim√©e) * dur√©e en minutes * facteur
  const estimatedMaxHR = 220 - 35; // Estimation pour un athl√®te de 35 ans, √† ajuster
  const hrIntensity = activity.average_heartrate / estimatedMaxHR;
  const durationMinutes = activity.moving_time / 60;
  const charge = hrIntensity * durationMinutes * 1.2; // Facteur d'ajustement
  
  return Math.round(charge * 100) / 100;
}

function calculateIntensity(activity: StravaActivity): number | null {
  // Calcul de l'intensit√© bas√© sur la vitesse et la FC
  if (!activity.average_heartrate) {
    return null;
  }
  
  // Intensit√© bas√©e sur le ratio FC/vitesse
  const speed = activity.average_speed || 1;
  const intensity = (activity.average_heartrate * speed) / 100;
  
  return Math.round(intensity * 1000) / 1000;
}

async function storeFormattedActivity(activityData: FormattedActivity, ownerId: number): Promise<void> {
  try {
    // ‚≠ê Nouvelle structure : activity:{id}
    const key = `activity:${activityData.activity_id}`;
    
    const { default: redis } = await import('./redis');
    
    // Stocker l'activit√© format√©e avec expiration de 30 jours
    await redis.setex(key, 30 * 24 * 60 * 60, JSON.stringify(activityData));
    
    // ‚≠ê Optionnel : garder aussi une liste par utilisateur pour faciliter les requ√™tes
    const userActivitiesKey = `user:${ownerId}:activities`;
    await redis.lpush(userActivitiesKey, activityData.activity_id.toString());
    
    // Garder seulement les 100 derni√®res activit√©s par utilisateur
    await redis.ltrim(userActivitiesKey, 0, 99);
    
    console.log(`üíæ Activit√© stock√©e: ${key}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du stockage de l\'activit√© format√©e:', error);
    throw error;
  }
}

// Fonction utilitaire pour r√©cup√©rer les activit√©s format√©es
export async function getUserFormattedActivities(userId: number, limit: number = 10): Promise<FormattedActivity[]> {
  try {
    const { default: redis } = await import('./redis');
    
    // R√©cup√©rer la liste des IDs d'activit√©s de l'utilisateur
    const userActivitiesKey = `user:${userId}:activities`;
    const activityIds = await redis.lrange(userActivitiesKey, 0, limit - 1);
    
    // R√©cup√©rer les donn√©es compl√®tes de chaque activit√©
    const activities: FormattedActivity[] = [];
    
    for (const activityId of activityIds) {
      const activityKey = `activity:${activityId}`;
      const activityData = await redis.get(activityKey);
      
      if (activityData) {
        const parsedActivity = typeof activityData === 'string' 
          ? JSON.parse(activityData) 
          : activityData;
        activities.push(parsedActivity);
      }
    }
    
    return activities;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des activit√©s format√©es:', error);
    return [];
  }
}
