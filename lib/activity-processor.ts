// lib/activity-processor.ts

import { StravaClient } from './strava-client';
import { getStoredUserToken, storeUserToken, storeActivityDetails } from './redis';
import { StravaActivity, StravaTokens, StravaActivityDetails } from '@/types/strava';

export async function fetchAndProcessActivity(activityId: number, ownerId: number): Promise<void> {
  try {
    // R√©cup√©rer les tokens de l'utilisateur depuis Redis
    let tokenData = await getStoredUserToken(ownerId);
    
    if (!tokenData) {
      console.log(`‚ùå Aucun token trouv√© pour l'utilisateur ${ownerId}`);
      return;
    }
    
    // V√©rifier si le token doit √™tre rafra√Æchi
    if (isTokenExpired(tokenData)) {
      console.log(`üîÑ Token expir√© pour l'utilisateur ${ownerId}, rafra√Æchissement...`);
      tokenData = await refreshUserToken(ownerId, tokenData.refresh_token);
    }
    
    // Cr√©er le client Strava
    const stravaClient = new StravaClient(tokenData.access_token);
    
    // R√©cup√©rer les d√©tails de l'activit√©
    const activity = await stravaClient.fetchActivity(activityId);
    
    console.log('‚úÖ Activit√© r√©cup√©r√©e:', {
      id: activity.id,
      name: activity.name,
      type: activity.type
    });
    
    // Traiter l'activit√© selon tes besoins
    await processActivity(activity, ownerId);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du traitement de l\'activit√©:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('401')) {
        console.error('üîê Erreur d\'authentification - token invalide ou expir√©');
      } else if (error.message.includes('403')) {
        console.error('üö´ Acc√®s interdit - v√©rifier les permissions');
      } else if (error.message.includes('404')) {
        console.error('üîç Activit√© non trouv√©e ou supprim√©e');
      } else if (error.message.includes('429')) {
        console.error('‚è±Ô∏è Rate limit atteint - trop de requ√™tes');
      }
    }
  }
}

async function processActivity(activity: StravaActivity, ownerId: number): Promise<void> {
  try {
    console.log(`üîÑ Traitement de l'activit√© ${activity.id} pour l'utilisateur ${ownerId}`);
    
    // ‚≠ê Stocker l'activit√© brute avec tracking
    await storeRawActivity(activity, ownerId);
    
    // ‚≠ê R√©cup√©rer les d√©tails pour les activit√©s de course
    if (StravaClient.shouldFetchDetails(activity)) {
      console.log(`üèÉ R√©cup√©ration des d√©tails pour l'activit√© de type ${activity.type}`);
      await fetchAndStoreActivityDetails(activity.id, ownerId);
    }
    
    console.log(`‚úÖ Activit√© ${activity.id} trait√©e avec succ√®s`);
    
  } catch (error) {
    console.error(`‚ùå Erreur lors du traitement de l'activit√© ${activity.id}:`, error);
    throw error;
  }
}

// ‚≠ê Stocker l'activit√© brute avec tracking timestamp
async function storeRawActivity(activity: StravaActivity, ownerId: number): Promise<void> {
  try {
    // Ajouter quelques m√©tadonn√©es utiles
    const enrichedActivity = {
      ...activity,
      userId: ownerId, // Ajouter l'userId pour les filtres
      processed_at: new Date().toISOString(),
      owner_id: ownerId // Pour compatibilit√©
    };
    
    // Stocker avec la nouvelle structure (sans :raw maintenant)
    const key = `activity:${activity.id}`;
    
    const { default: redis } = await import('./redis');
    
    // Stocker l'activit√© brute avec expiration de 90 jours
    await redis.setex(key, 90 * 24 * 60 * 60, JSON.stringify(enrichedActivity));
    
    // ‚≠ê Ajouter √† la liste globale
    await redis.lpush('activities:ids', activity.id.toString());
    
    // Garder seulement les 500 derni√®res activit√©s dans la liste
    await redis.ltrim('activities:ids', 0, 499);
    
    // ‚≠ê Tracker la derni√®re activit√©
    await updateLastActivityTimestamp(activity.start_date);
    
    console.log(`üíæ Activit√© brute stock√©e: ${key}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du stockage de l\'activit√© brute:', error);
    throw error;
  }
}

// ‚≠ê Mettre √† jour le timestamp de derni√®re activit√©
async function updateLastActivityTimestamp(activityDate: string): Promise<void> {
  try {
    const { default: redis } = await import('./redis');
    const timestamp = new Date(activityDate).getTime();
    
    // R√©cup√©rer l'ancien timestamp
    const currentTimestamp = await redis.get('activities:last_activity');
    
    // Mettre √† jour seulement si plus r√©cent
    if (!currentTimestamp || timestamp > parseInt(currentTimestamp.toString())) {
      await redis.set('activities:last_activity', timestamp.toString());
      console.log(`üìÖ Derni√®re activit√© mise √† jour: ${activityDate}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur mise √† jour timestamp:', error);
  }
}

// Fonction pour r√©cup√©rer et stocker les d√©tails
async function fetchAndStoreActivityDetails(activityId: number, ownerId: number): Promise<void> {
  try {
    // R√©cup√©rer le token utilisateur
    let tokenData = await getStoredUserToken(ownerId);
    
    if (!tokenData) {
      console.log(`‚ùå Pas de token pour r√©cup√©rer les d√©tails de l'activit√© ${activityId}`);
      return;
    }
    
    // V√©rifier expiration du token
    if (isTokenExpired(tokenData)) {
      tokenData = await refreshUserToken(ownerId, tokenData.refresh_token);
    }
    
    // Cr√©er le client et r√©cup√©rer les d√©tails
    const stravaClient = new StravaClient(tokenData.access_token);
    const details = await stravaClient.fetchActivityDetails(activityId);
    
    // Stocker les d√©tails dans Redis
    await storeActivityDetails(activityId, details);
    
    console.log(`üìä D√©tails stock√©s pour l'activit√© ${activityId}`);
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration des d√©tails pour l'activit√© ${activityId}:`, error);
    // Ne pas faire √©chouer tout le processus pour les d√©tails
  }
}

function isTokenExpired(tokenData: StravaTokens): boolean {
  const now = Math.floor(Date.now() / 1000);
  const bufferTime = 300; // 5 minutes de marge
  return now >= (tokenData.expires_at - bufferTime);
}

async function refreshUserToken(userId: number, refreshToken: string): Promise<StravaTokens> {
  try {
    const stravaClient = new StravaClient(''); // Token vide pour le refresh
    const newTokenData = await stravaClient.refreshToken(refreshToken);
    
    const tokens: StravaTokens = {
      access_token: newTokenData.access_token,
      refresh_token: newTokenData.refresh_token,
      expires_at: newTokenData.expires_at,
      token_type: newTokenData.token_type
    };
    
    // Stocker les nouveaux tokens
    await storeUserToken(userId, tokens);
    console.log(`‚úÖ Token rafra√Æchi pour l'utilisateur ${userId}`);
    
    return tokens;
  } catch (error) {
    console.error(`‚ùå Erreur lors du refresh token pour l'utilisateur ${userId}:`, error);
    throw new Error(`Impossible de rafra√Æchir le token: ${error}`);
  }
}

// ‚≠ê FONCTION INTELLIGENTE : R√©cup√©rer les activit√©s brutes avec gestion multi-format des dates
export async function getUserRawActivities(userId: number, limit: number = 10): Promise<StravaActivity[]> {
  try {
    const { default: redis } = await import('./redis');
    
    // R√©cup√©rer la liste des IDs d'activit√©s depuis la liste globale
    const activityIds = await redis.lrange('activities:ids', 0, limit * 3); // Plus pour filtrer
    
    console.log(`üìã R√©cup√©ration de ${activityIds.length} IDs d'activit√©s`);
    
    // R√©cup√©rer les donn√©es compl√®tes de chaque activit√©
    const activities: StravaActivity[] = [];
    
    for (const activityId of activityIds) {
      const activityKey = `activity:${activityId}`;
      const activityData = await redis.get(activityKey);
      
      if (activityData) {
        const parsedActivity = typeof activityData === 'string' 
          ? JSON.parse(activityData) 
          : activityData;
        
        // ‚≠ê LOGIQUE INTELLIGENTE : Filtrage flexible selon la disponibilit√© des donn√©es
        const activityUserId = parsedActivity.userId || parsedActivity.owner_id;
        
        // Si pas de userId dans l'activit√©, on la prend quand m√™me (anciennes activit√©s)
        // Si userId demand√© et pr√©sent dans l'activit√©, on filtre
        const shouldInclude = !activityUserId || activityUserId === userId;
        
        if (shouldInclude) {
          activities.push(parsedActivity);
          
          // Arr√™ter si on a assez d'activit√©s
          if (activities.length >= limit) {
            break;
          }
        }
      }
    }
    
    // ‚≠ê CORRECTION : Tri intelligent avec gestion multi-format des dates
    activities.sort((a, b) => {
      // Chercher la date dans plusieurs champs possibles (anciennes vs nouvelles activit√©s)
      const dateA = a.start_date || a.date || a.start_date_local;
      const dateB = b.start_date || b.date || b.start_date_local;
      
      if (!dateA || !dateB) return 0;
      
      try {
        return new Date(dateB).getTime() - new Date(dateA).getTime();
      } catch (e) {
        return 0; // En cas d'erreur de parsing de date
      }
    });
    
    console.log(`‚úÖ ${activities.length} activit√©s r√©cup√©r√©es pour userId=${userId}`);
    
    return activities;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des activit√©s brutes:', error);
    return [];
  }
}

// ‚≠ê R√©cup√©rer le timestamp de derni√®re activit√©
export async function getLastActivityTimestamp(): Promise<number | null> {
  try {
    const { default: redis } = await import('./redis');
    const timestamp = await redis.get('activities:last_activity');
    
    return timestamp ? parseInt(timestamp.toString()) : null;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration timestamp:', error);
    return null;
  }
}

// ‚≠ê Initialiser le timestamp si pas pr√©sent
export async function initializeLastActivityTimestamp(): Promise<void> {
  try {
    const { default: redis } = await import('./redis');
    
    // V√©rifier s'il existe d√©j√†
    const exists = await redis.exists('activities:last_activity');
    
    if (!exists) {
      // R√©cup√©rer la premi√®re activit√© de la liste pour initialiser
      const firstActivityId = await redis.lindex('activities:ids', 0);
      
      if (firstActivityId) {
        const activityData = await redis.get(`activity:${firstActivityId}`);
        
        if (activityData) {
          const activity = typeof activityData === 'string' 
            ? JSON.parse(activityData) 
            : activityData;
          
          // ‚≠ê CORRECTION : Chercher la date dans plusieurs champs
          const activityDate = activity.start_date || activity.date || activity.start_date_local;
          
          if (activityDate) {
            await updateLastActivityTimestamp(activityDate);
            console.log('üìÖ Timestamp initialis√© depuis la premi√®re activit√©');
          } else {
            // Pas de date trouv√©e, initialiser √† maintenant
            await redis.set('activities:last_activity', Date.now().toString());
            console.log('üìÖ Timestamp initialis√© √† maintenant (pas de date trouv√©e)');
          }
        }
      } else {
        // Pas d'activit√©s, initialiser √† maintenant
        await redis.set('activities:last_activity', Date.now().toString());
        console.log('üìÖ Timestamp initialis√© √† maintenant (pas d\'activit√©s)');
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur initialisation timestamp:', error);
  }
}

// ‚≠ê NOUVELLE FONCTION : R√©cup√©rer une activit√© sp√©cifique avec gestion des dates
export async function getActivityById(activityId: number): Promise<StravaActivity | null> {
  try {
    const { default: redis } = await import('./redis');
    
    const activityData = await redis.get(`activity:${activityId}`);
    
    if (activityData) {
      const parsedActivity = typeof activityData === 'string' 
        ? JSON.parse(activityData) 
        : activityData;
      
      return parsedActivity;
    }
    
    return null;
  } catch (error) {
    console.error(`‚ùå Erreur r√©cup√©ration activit√© ${activityId}:`, error);
    return null;
  }
}

// ‚≠ê FONCTION UTILITAIRE : Extraire la date d'une activit√© de mani√®re intelligente
export function getActivityDate(activity: any): string | null {
  // Ordre de priorit√© pour les champs de date
  return activity.start_date || activity.date || activity.start_date_local || null;
}

// ‚≠ê FONCTION UTILITAIRE : V√©rifier si une activit√© est r√©cente
export function isActivityRecent(activity: any, daysBack: number = 7): boolean {
  const activityDate = getActivityDate(activity);
  
  if (!activityDate) return false;
  
  try {
    const activityTimestamp = new Date(activityDate).getTime();
    const cutoffTimestamp = Date.now() - (daysBack * 24 * 60 * 60 * 1000);
    
    return activityTimestamp >= cutoffTimestamp;
  } catch (e) {
    return false;
  }
}
